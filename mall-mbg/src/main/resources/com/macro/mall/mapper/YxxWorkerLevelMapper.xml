<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.macro.mall.mapper.YxxWorkerLevelMapper">
  <resultMap id="BaseResultMap" type="com.macro.mall.model.YxxWorkerLevel">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="enable" jdbcType="INTEGER" property="enable" />
    <result column="price_month" jdbcType="DECIMAL" property="priceMonth" />
    <result column="price_monthly" jdbcType="DECIMAL" property="priceMonthly" />
    <result column="price_year" jdbcType="DECIMAL" property="priceYear" />
    <result column="deleted" jdbcType="INTEGER" property="deleted" />
    <result column="order_assign_amount" jdbcType="INTEGER" property="orderAssignAmount" />
    <result column="order_distribute_amount" jdbcType="INTEGER" property="orderDistributeAmount" />
    <result column="order_rush_amount" jdbcType="INTEGER" property="orderRushAmount" />
    <result column="order_rush_amount_bargain" jdbcType="INTEGER" property="orderRushAmountBargain" />
    <result column="cut_discount" jdbcType="DECIMAL" property="cutDiscount" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="update_by" jdbcType="BIGINT" property="updateBy" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `name`, `enable`, price_month, price_monthly, price_year, deleted, order_assign_amount, 
    order_distribute_amount, order_rush_amount, order_rush_amount_bargain, cut_discount, 
    remark, create_time, update_time, create_by, update_by
  </sql>
  <select id="selectByExample" parameterType="com.macro.mall.example.YxxWorkerLevelExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from yxx_worker_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from yxx_worker_level
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from yxx_worker_level
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from yxx_worker_level
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from yxx_worker_level
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.macro.mall.example.YxxWorkerLevelExample">
    delete from yxx_worker_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.macro.mall.model.YxxWorkerLevel">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into yxx_worker_level (`name`, `enable`, price_month, 
      price_monthly, price_year, deleted, 
      order_assign_amount, order_distribute_amount, 
      order_rush_amount, order_rush_amount_bargain, 
      cut_discount, remark, create_time, 
      update_time, create_by, update_by
      )
    values (#{name,jdbcType=VARCHAR}, #{enable,jdbcType=INTEGER}, #{priceMonth,jdbcType=DECIMAL}, 
      #{priceMonthly,jdbcType=DECIMAL}, #{priceYear,jdbcType=DECIMAL}, #{deleted,jdbcType=INTEGER}, 
      #{orderAssignAmount,jdbcType=INTEGER}, #{orderDistributeAmount,jdbcType=INTEGER}, 
      #{orderRushAmount,jdbcType=INTEGER}, #{orderRushAmountBargain,jdbcType=INTEGER}, 
      #{cutDiscount,jdbcType=DECIMAL}, #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="map">
    <selectKey keyProperty="record.id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into yxx_worker_level
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.name != null">
            `name`,
          </if>
          <if test="record.enable != null">
            `enable`,
          </if>
          <if test="record.priceMonth != null">
            price_month,
          </if>
          <if test="record.priceMonthly != null">
            price_monthly,
          </if>
          <if test="record.priceYear != null">
            price_year,
          </if>
          <if test="record.deleted != null">
            deleted,
          </if>
          <if test="record.orderAssignAmount != null">
            order_assign_amount,
          </if>
          <if test="record.orderDistributeAmount != null">
            order_distribute_amount,
          </if>
          <if test="record.orderRushAmount != null">
            order_rush_amount,
          </if>
          <if test="record.orderRushAmountBargain != null">
            order_rush_amount_bargain,
          </if>
          <if test="record.cutDiscount != null">
            cut_discount,
          </if>
          <if test="record.remark != null">
            remark,
          </if>
          <if test="record.createTime != null">
            create_time,
          </if>
          <if test="record.updateTime != null">
            update_time,
          </if>
          <if test="record.createBy != null">
            create_by,
          </if>
          <if test="record.updateBy != null">
            update_by,
          </if>
        </trim>
        <trim prefix="(" suffix=")" suffixOverrides="," />
      </otherwise>
    </choose>
    values
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach close=")" collection="selective" item="column" open="(" separator=",">
          #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim prefix="(" suffix=")" suffixOverrides=",">
          <if test="record.name != null">
            #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.enable != null">
            #{record.enable,jdbcType=INTEGER},
          </if>
          <if test="record.priceMonth != null">
            #{record.priceMonth,jdbcType=DECIMAL},
          </if>
          <if test="record.priceMonthly != null">
            #{record.priceMonthly,jdbcType=DECIMAL},
          </if>
          <if test="record.priceYear != null">
            #{record.priceYear,jdbcType=DECIMAL},
          </if>
          <if test="record.deleted != null">
            #{record.deleted,jdbcType=INTEGER},
          </if>
          <if test="record.orderAssignAmount != null">
            #{record.orderAssignAmount,jdbcType=INTEGER},
          </if>
          <if test="record.orderDistributeAmount != null">
            #{record.orderDistributeAmount,jdbcType=INTEGER},
          </if>
          <if test="record.orderRushAmount != null">
            #{record.orderRushAmount,jdbcType=INTEGER},
          </if>
          <if test="record.orderRushAmountBargain != null">
            #{record.orderRushAmountBargain,jdbcType=INTEGER},
          </if>
          <if test="record.cutDiscount != null">
            #{record.cutDiscount,jdbcType=DECIMAL},
          </if>
          <if test="record.remark != null">
            #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            #{record.updateBy,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
  </insert>
  <select id="countByExample" parameterType="com.macro.mall.example.YxxWorkerLevelExample" resultType="java.lang.Long">
    select count(*) from yxx_worker_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update yxx_worker_level
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.id != null">
            id = #{record.id,jdbcType=INTEGER},
          </if>
          <if test="record.name != null">
            `name` = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.enable != null">
            `enable` = #{record.enable,jdbcType=INTEGER},
          </if>
          <if test="record.priceMonth != null">
            price_month = #{record.priceMonth,jdbcType=DECIMAL},
          </if>
          <if test="record.priceMonthly != null">
            price_monthly = #{record.priceMonthly,jdbcType=DECIMAL},
          </if>
          <if test="record.priceYear != null">
            price_year = #{record.priceYear,jdbcType=DECIMAL},
          </if>
          <if test="record.deleted != null">
            deleted = #{record.deleted,jdbcType=INTEGER},
          </if>
          <if test="record.orderAssignAmount != null">
            order_assign_amount = #{record.orderAssignAmount,jdbcType=INTEGER},
          </if>
          <if test="record.orderDistributeAmount != null">
            order_distribute_amount = #{record.orderDistributeAmount,jdbcType=INTEGER},
          </if>
          <if test="record.orderRushAmount != null">
            order_rush_amount = #{record.orderRushAmount,jdbcType=INTEGER},
          </if>
          <if test="record.orderRushAmountBargain != null">
            order_rush_amount_bargain = #{record.orderRushAmountBargain,jdbcType=INTEGER},
          </if>
          <if test="record.cutDiscount != null">
            cut_discount = #{record.cutDiscount,jdbcType=DECIMAL},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update yxx_worker_level
    set id = #{record.id,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR},
      `enable` = #{record.enable,jdbcType=INTEGER},
      price_month = #{record.priceMonth,jdbcType=DECIMAL},
      price_monthly = #{record.priceMonthly,jdbcType=DECIMAL},
      price_year = #{record.priceYear,jdbcType=DECIMAL},
      deleted = #{record.deleted,jdbcType=INTEGER},
      order_assign_amount = #{record.orderAssignAmount,jdbcType=INTEGER},
      order_distribute_amount = #{record.orderDistributeAmount,jdbcType=INTEGER},
      order_rush_amount = #{record.orderRushAmount,jdbcType=INTEGER},
      order_rush_amount_bargain = #{record.orderRushAmountBargain,jdbcType=INTEGER},
      cut_discount = #{record.cutDiscount,jdbcType=DECIMAL},
      remark = #{record.remark,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_by = #{record.createBy,jdbcType=BIGINT},
      update_by = #{record.updateBy,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="map">
    update yxx_worker_level
    SET
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName} = #{record.${column.javaProperty},jdbcType=${column.jdbcType}}
        </foreach>
      </when>
      <otherwise>
        <trim suffixOverrides=",">
          <if test="record.name != null">
            `name` = #{record.name,jdbcType=VARCHAR},
          </if>
          <if test="record.enable != null">
            `enable` = #{record.enable,jdbcType=INTEGER},
          </if>
          <if test="record.priceMonth != null">
            price_month = #{record.priceMonth,jdbcType=DECIMAL},
          </if>
          <if test="record.priceMonthly != null">
            price_monthly = #{record.priceMonthly,jdbcType=DECIMAL},
          </if>
          <if test="record.priceYear != null">
            price_year = #{record.priceYear,jdbcType=DECIMAL},
          </if>
          <if test="record.deleted != null">
            deleted = #{record.deleted,jdbcType=INTEGER},
          </if>
          <if test="record.orderAssignAmount != null">
            order_assign_amount = #{record.orderAssignAmount,jdbcType=INTEGER},
          </if>
          <if test="record.orderDistributeAmount != null">
            order_distribute_amount = #{record.orderDistributeAmount,jdbcType=INTEGER},
          </if>
          <if test="record.orderRushAmount != null">
            order_rush_amount = #{record.orderRushAmount,jdbcType=INTEGER},
          </if>
          <if test="record.orderRushAmountBargain != null">
            order_rush_amount_bargain = #{record.orderRushAmountBargain,jdbcType=INTEGER},
          </if>
          <if test="record.cutDiscount != null">
            cut_discount = #{record.cutDiscount,jdbcType=DECIMAL},
          </if>
          <if test="record.remark != null">
            remark = #{record.remark,jdbcType=VARCHAR},
          </if>
          <if test="record.createTime != null">
            create_time = #{record.createTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.updateTime != null">
            update_time = #{record.updateTime,jdbcType=TIMESTAMP},
          </if>
          <if test="record.createBy != null">
            create_by = #{record.createBy,jdbcType=BIGINT},
          </if>
          <if test="record.updateBy != null">
            update_by = #{record.updateBy,jdbcType=BIGINT},
          </if>
        </trim>
      </otherwise>
    </choose>
    where id = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.macro.mall.model.YxxWorkerLevel">
    update yxx_worker_level
    set `name` = #{name,jdbcType=VARCHAR},
      `enable` = #{enable,jdbcType=INTEGER},
      price_month = #{priceMonth,jdbcType=DECIMAL},
      price_monthly = #{priceMonthly,jdbcType=DECIMAL},
      price_year = #{priceYear,jdbcType=DECIMAL},
      deleted = #{deleted,jdbcType=INTEGER},
      order_assign_amount = #{orderAssignAmount,jdbcType=INTEGER},
      order_distribute_amount = #{orderDistributeAmount,jdbcType=INTEGER},
      order_rush_amount = #{orderRushAmount,jdbcType=INTEGER},
      order_rush_amount_bargain = #{orderRushAmountBargain,jdbcType=INTEGER},
      cut_discount = #{cutDiscount,jdbcType=DECIMAL},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      update_by = #{updateBy,jdbcType=BIGINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.macro.mall.example.YxxWorkerLevelExample" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from yxx_worker_level
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
      </otherwise>
    </choose>
    from yxx_worker_level
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into yxx_worker_level
    (`name`, `enable`, price_month, price_monthly, price_year, deleted, order_assign_amount, 
      order_distribute_amount, order_rush_amount, order_rush_amount_bargain, cut_discount, 
      remark, create_time, update_time, create_by, update_by)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.name,jdbcType=VARCHAR}, #{item.enable,jdbcType=INTEGER}, #{item.priceMonth,jdbcType=DECIMAL}, 
        #{item.priceMonthly,jdbcType=DECIMAL}, #{item.priceYear,jdbcType=DECIMAL}, #{item.deleted,jdbcType=INTEGER}, 
        #{item.orderAssignAmount,jdbcType=INTEGER}, #{item.orderDistributeAmount,jdbcType=INTEGER}, 
        #{item.orderRushAmount,jdbcType=INTEGER}, #{item.orderRushAmountBargain,jdbcType=INTEGER}, 
        #{item.cutDiscount,jdbcType=DECIMAL}, #{item.remark,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, 
        #{item.updateTime,jdbcType=TIMESTAMP}, #{item.createBy,jdbcType=BIGINT}, #{item.updateBy,jdbcType=BIGINT}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" keyColumn="id" keyProperty="list.id" parameterType="map" useGeneratedKeys="true">
    insert into yxx_worker_level (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'name'.toString() == column.value">
          #{item.name,jdbcType=VARCHAR}
        </if>
        <if test="'enable'.toString() == column.value">
          #{item.enable,jdbcType=INTEGER}
        </if>
        <if test="'price_month'.toString() == column.value">
          #{item.priceMonth,jdbcType=DECIMAL}
        </if>
        <if test="'price_monthly'.toString() == column.value">
          #{item.priceMonthly,jdbcType=DECIMAL}
        </if>
        <if test="'price_year'.toString() == column.value">
          #{item.priceYear,jdbcType=DECIMAL}
        </if>
        <if test="'deleted'.toString() == column.value">
          #{item.deleted,jdbcType=INTEGER}
        </if>
        <if test="'order_assign_amount'.toString() == column.value">
          #{item.orderAssignAmount,jdbcType=INTEGER}
        </if>
        <if test="'order_distribute_amount'.toString() == column.value">
          #{item.orderDistributeAmount,jdbcType=INTEGER}
        </if>
        <if test="'order_rush_amount'.toString() == column.value">
          #{item.orderRushAmount,jdbcType=INTEGER}
        </if>
        <if test="'order_rush_amount_bargain'.toString() == column.value">
          #{item.orderRushAmountBargain,jdbcType=INTEGER}
        </if>
        <if test="'cut_discount'.toString() == column.value">
          #{item.cutDiscount,jdbcType=DECIMAL}
        </if>
        <if test="'remark'.toString() == column.value">
          #{item.remark,jdbcType=VARCHAR}
        </if>
        <if test="'create_time'.toString() == column.value">
          #{item.createTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'create_by'.toString() == column.value">
          #{item.createBy,jdbcType=BIGINT}
        </if>
        <if test="'update_by'.toString() == column.value">
          #{item.updateBy,jdbcType=BIGINT}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>